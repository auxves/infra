From f93166229fe9b57f7d54fb0a9c42939f3f30340f Mon Sep 17 00:00:00 2001
From: ibizaman <ibizapeanut@gmail.com>
Date: Fri, 10 Feb 2023 23:51:14 -0800
Subject: [PATCH] Add support for per route authorization

---
 oauthproxy.go                      |  4 +--
 oauthproxy_test.go                 |  6 ++--
 providers/gitlab.go                |  8 +++--
 providers/gitlab_test.go           |  2 +-
 providers/keycloak_oidc.go         | 16 ++++++---
 providers/provider_data.go         | 28 +++++++++++++--
 providers/provider_default.go      | 20 ++++++++---
 providers/provider_default_test.go | 56 +++++++++++++++++++++++++++++-
 providers/providers.go             |  2 +-
 9 files changed, 121 insertions(+), 21 deletions(-)

diff --git a/oauthproxy.go b/oauthproxy.go
index a0d4bf7b3e..d6cd926ce6 100644
--- a/oauthproxy.go
+++ b/oauthproxy.go
@@ -862,7 +862,7 @@ func (p *OAuthProxy) OAuthCallback(rw http.ResponseWriter, req *http.Request) {
 	}
 
 	// set cookie, or deny
-	authorized, err := p.provider.Authorize(req.Context(), session)
+	authorized, err := p.provider.Authorize(req.Context(), session, req.URL.Path)
 	if err != nil {
 		logger.Errorf("Error with authorization: %v", err)
 	}
@@ -1050,7 +1050,7 @@ func (p *OAuthProxy) getAuthenticatedSession(rw http.ResponseWriter, req *http.R
 	}
 
 	invalidEmail := session.Email != "" && !p.Validator(session.Email)
-	authorized, err := p.provider.Authorize(req.Context(), session)
+	authorized, err := p.provider.Authorize(req.Context(), session, req.URL.Path)
 	if err != nil {
 		logger.Errorf("Error with authorization: %v", err)
 	}
diff --git a/oauthproxy_test.go b/oauthproxy_test.go
index 0d8bc91a6e..5d142107df 100644
--- a/oauthproxy_test.go
+++ b/oauthproxy_test.go
@@ -836,9 +836,11 @@ func NewProcessCookieTest(opts ProcessCookieTestOpts, modifiers ...OptionsModifi
 	}
 
 	groups := pcTest.opts.Providers[0].AllowedGroups
-	testProvider.ProviderData.AllowedGroups = make(map[string]struct{}, len(groups))
+	testProvider.ProviderData.AllowedGroups = map[string]map[string]struct{}{
+		"/": make(map[string]struct{}, len(groups)),
+	}
 	for _, group := range groups {
-		testProvider.ProviderData.AllowedGroups[group] = struct{}{}
+		testProvider.ProviderData.AllowedGroups["/"][group] = struct{}{}
 	}
 	pcTest.proxy.provider = testProvider
 
diff --git a/providers/gitlab.go b/providers/gitlab.go
index a510debf9a..bf8e96c00e 100644
--- a/providers/gitlab.go
+++ b/providers/gitlab.go
@@ -61,17 +61,21 @@ func NewGitLabProvider(p *ProviderData, opts options.GitLabOptions) (*GitLabProv
 // setAllowedProjects adds Gitlab projects to the AllowedGroups list
 // and tracks them to do a project API lookup during `EnrichSession`.
 func (p *GitLabProvider) setAllowedProjects(projects []string) error {
-	for _, project := range projects {
+	groups := make([]string, len(projects))
+	for i, project := range projects {
 		gp, err := newGitlabProject(project)
 		if err != nil {
 			return err
 		}
 		p.allowedProjects = append(p.allowedProjects, gp)
-		p.AllowedGroups[formatProject(gp)] = struct{}{}
+		groups[i] = formatProject(gp)
 	}
+	p.addAllowedGroups(groups)
+
 	if len(p.allowedProjects) > 0 {
 		p.setProjectScope()
 	}
+
 	return nil
 }
 
diff --git a/providers/gitlab_test.go b/providers/gitlab_test.go
index 9510701e2c..c664337857 100644
--- a/providers/gitlab_test.go
+++ b/providers/gitlab_test.go
@@ -248,7 +248,7 @@ var _ = Describe("Gitlab Provider Tests", func() {
 				Expect(err).To(BeNil())
 				Expect(session.Groups).To(Equal(in.expectedGroups))
 
-				authorized, err := p.Authorize(context.Background(), session)
+				authorized, err := p.Authorize(context.Background(), session, "/")
 				Expect(err).To(BeNil())
 				Expect(authorized).To(Equal(in.expectedAuthz))
 			},
diff --git a/providers/keycloak_oidc.go b/providers/keycloak_oidc.go
index 6e85136b4e..4599fdfb48 100644
--- a/providers/keycloak_oidc.go
+++ b/providers/keycloak_oidc.go
@@ -3,6 +3,7 @@ package providers
 import (
 	"context"
 	"fmt"
+	"strings"
 
 	"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/options"
 	"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/sessions"
@@ -37,12 +38,17 @@ var _ Provider = (*KeycloakOIDCProvider)(nil)
 // Assumes `SetAllowedGroups` is already called on groups and appends to that
 // with `role:` prefixed roles.
 func (p *KeycloakOIDCProvider) addAllowedRoles(roles []string) {
-	if p.AllowedGroups == nil {
-		p.AllowedGroups = make(map[string]struct{})
-	}
-	for _, role := range roles {
-		p.AllowedGroups[formatRole(role)] = struct{}{}
+	groups := make([]string, len(roles))
+	for i, r := range roles {
+		path, role, hasPath := strings.Cut(r, "|")
+		if !hasPath {
+			role = path
+			path = "/"
+		}
+
+		groups[i] = path + "|" + formatRole(role)
 	}
+	p.addAllowedGroups(groups)
 }
 
 // CreateSessionFromToken converts Bearer IDTokens into sessions
 
diff --git a/providers/provider_data.go b/providers/provider_data.go
index 0e3f090f01..7d4f907bec 100644
--- a/providers/provider_data.go
+++ b/providers/provider_data.go
@@ -51,7 +51,7 @@ type ProviderData struct {
 
 	// Universal Group authorization data structure
 	// any provider can set to consume
-	AllowedGroups map[string]struct{}
+	AllowedGroups map[string]map[string]struct{}
 
 	getAuthorizationHeaderFunc func(string) http.Header
 	loginURLParameterDefaults  url.Values
@@ -172,9 +172,31 @@ func regexpForRule(rule options.URLParameterRule) string {
 // setAllowedGroups organizes a group list into the AllowedGroups map
 // to be consumed by Authorize implementations
 func (p *ProviderData) setAllowedGroups(groups []string) {
-	p.AllowedGroups = make(map[string]struct{}, len(groups))
+	p.AllowedGroups = nil
+	p.addAllowedGroups(groups)
+}
+
+// addAllowedGroups appends a group list into the AllowedGroups map
+func (p *ProviderData) addAllowedGroups(groups []string) {
+	if p.AllowedGroups == nil {
+		p.AllowedGroups = make(map[string]map[string]struct{})
+	}
+
 	for _, group := range groups {
-		p.AllowedGroups[group] = struct{}{}
+		path, group, hasPath := strings.Cut(group, "|")
+		if !hasPath {
+			group = path
+			path = "/"
+		}
+
+		logger.Printf("Add allowed group %q for path %q", group, path)
+
+		pathGroups := p.AllowedGroups[path]
+		if pathGroups == nil {
+			pathGroups = make(map[string]struct{})
+		}
+		pathGroups[group] = struct{}{}
+		p.AllowedGroups[path] = pathGroups
 	}
 }
 
diff --git a/providers/provider_default.go b/providers/provider_default.go
index 756b5f69e5..6767e4863a 100644
--- a/providers/provider_default.go
+++ b/providers/provider_default.go
@@ -6,6 +6,7 @@ import (
 	"errors"
 	"fmt"
 	"net/url"
+	"strings"
 
 	"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/middleware"
 	"github.com/oauth2-proxy/oauth2-proxy/v7/pkg/apis/sessions"
@@ -114,14 +115,25 @@ func (p *ProviderData) EnrichSession(_ context.Context, _ *sessions.SessionState
 }
 
 // Authorize performs global authorization on an authenticated session.
-// This is not used for fine-grained per route authorization rules.
-func (p *ProviderData) Authorize(_ context.Context, s *sessions.SessionState) (bool, error) {
-	if len(p.AllowedGroups) == 0 {
+// This can be used for fine-grained per route authorization rules.
+func (p *ProviderData) Authorize(_ context.Context, s *sessions.SessionState, path string) (bool, error) {
+	allowedGroups := p.AllowedGroups["/"]
+	var matchPathLen int
+	for groupsPath, groups := range p.AllowedGroups {
+		if strings.HasPrefix(path, groupsPath) {
+			if len(groupsPath) > matchPathLen {
+				matchPathLen = len(groupsPath)
+				allowedGroups = groups
+			}
+		}
+	}
+
+	if len(allowedGroups) == 0 {
 		return true, nil
 	}
 
 	for _, group := range s.Groups {
-		if _, ok := p.AllowedGroups[group]; ok {
+		if _, ok := allowedGroups[group]; ok {
 			return true, nil
 		}
 	}
diff --git a/providers/provider_default_test.go b/providers/provider_default_test.go
index 80d5b4ce93..93e32903a0 100644
--- a/providers/provider_default_test.go
+++ b/providers/provider_default_test.go
@@ -75,32 +75,86 @@ func TestProviderDataAuthorize(t *testing.T) {
 		name          string
 		allowedGroups []string
 		groups        []string
+		url           *url.URL
 		expectedAuthZ bool
 	}{
 		{
 			name:          "NoAllowedGroups",
 			allowedGroups: []string{},
 			groups:        []string{},
+			url: &url.URL{
+				Scheme: "http",
+				Host:   "my.test.idp",
+				Path:   "/",
+			},
 			expectedAuthZ: true,
 		},
 		{
 			name:          "NoAllowedGroupsUserHasGroups",
 			allowedGroups: []string{},
 			groups:        []string{"foo", "bar"},
+			url: &url.URL{
+				Scheme: "http",
+				Host:   "my.test.idp",
+				Path:   "/",
+			},
 			expectedAuthZ: true,
 		},
 		{
 			name:          "UserInAllowedGroup",
 			allowedGroups: []string{"foo"},
 			groups:        []string{"foo", "bar"},
+			url: &url.URL{
+				Scheme: "http",
+				Host:   "my.test.idp",
+				Path:   "/",
+			},
 			expectedAuthZ: true,
 		},
 		{
 			name:          "UserNotInAllowedGroup",
 			allowedGroups: []string{"bar"},
 			groups:        []string{"baz", "foo"},
+			url: &url.URL{
+				Scheme: "http",
+				Host:   "my.test.idp",
+				Path:   "/",
+			},
 			expectedAuthZ: false,
 		},
+		{
+			name:          "NoAllowedGroupsMatchingPath",
+			allowedGroups: []string{"bar", "/path|doo"},
+			groups:        []string{"foo"},
+			url: &url.URL{
+				Scheme: "http",
+				Host:   "my.test.idp",
+				Path:   "/path",
+			},
+			expectedAuthZ: false,
+		},
+		{
+			name:          "AllowedGroupsMatchingPath",
+			allowedGroups: []string{"bar", "/path|foo"},
+			groups:        []string{"foo"},
+			url: &url.URL{
+				Scheme: "http",
+				Host:   "my.test.idp",
+				Path:   "/path",
+			},
+			expectedAuthZ: true,
+		},
+		{
+			name:          "MoreSpecificPathMatches",
+			allowedGroups: []string{"bar", "/p|bar", "/pa|bar", "/pat|bar", "/path|foo"},
+			groups:        []string{"foo"},
+			url: &url.URL{
+				Scheme: "http",
+				Host:   "my.test.idp",
+				Path:   "/path",
+			},
+			expectedAuthZ: true,
+		},
 	}
 
 	for _, tc := range testCases {
@@ -113,7 +167,7 @@ func TestProviderDataAuthorize(t *testing.T) {
 			p := &ProviderData{}
 			p.setAllowedGroups(tc.allowedGroups)
 
-			authorized, err := p.Authorize(context.Background(), session)
+			authorized, err := p.Authorize(context.Background(), session, tc.url.Path)
 			g.Expect(err).ToNot(HaveOccurred())
 			g.Expect(authorized).To(Equal(tc.expectedAuthZ))
 		})
diff --git a/providers/providers.go b/providers/providers.go
index 1640c38eb4..cbc22aef9a 100644
--- a/providers/providers.go
+++ b/providers/providers.go
@@ -25,7 +25,7 @@ type Provider interface {
 	// Deprecated: Migrate to EnrichSession
 	GetEmailAddress(ctx context.Context, s *sessions.SessionState) (string, error)
 	EnrichSession(ctx context.Context, s *sessions.SessionState) error
-	Authorize(ctx context.Context, s *sessions.SessionState) (bool, error)
+	Authorize(ctx context.Context, s *sessions.SessionState, path string) (bool, error)
 	ValidateSession(ctx context.Context, s *sessions.SessionState) bool
 	RefreshSession(ctx context.Context, s *sessions.SessionState) (bool, error)
 	CreateSessionFromToken(ctx context.Context, token string) (*sessions.SessionState, error)